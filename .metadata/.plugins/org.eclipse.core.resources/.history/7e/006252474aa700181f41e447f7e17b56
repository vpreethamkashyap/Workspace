#ifndef SHAPE_HPP_
#define SHAPE_HPP_

#include <iostream>

class shape
{

private:

  const std::string color;

public:

  /**
   * Constructor
   */
  shape(const std::string& color):color(color)
{
    std::cout << "Abstract base class constructor" << std::endl;
}

  /**
   * Destructor
   */
  virtual ~shape()
  {
    std::cout << "Abstract base class destructor" << std::endl;
  }


  /**
   *
   * @return
   *
   * double area() - a const pure virtual member function that computes and returns the object's area.
   * It must be overridden in each derived class.
   */
  //
  virtual double area() const = 0;

  /**
   *
   * @param
   */
  virtual void setType(std::string) = 0;

  /**
   *
   * @return
   */
  virtual std::string getType(void) = 0;

  /**
   *
   * @param x
   * @param y
   */
  virtual void setVolume(int x, int y) = 0;


  /**
   *
   * @return
   */
  virtual std::string getColor(void) const = 0;

};


#endif

